const Queue = require('../DS').Queue;

/* ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

 ----*** üçπ BAR CHECKPOINT üçπ ***----

Felicitaciones por llegar a esta instancia! El checkpoint que realizar√°s a continuaci√≥n
consistir√° en resolver varios problemas que surgieron en un bar.
Tendr√°s que resolver cada uno de ellos, aplicando los conceptos aprendidos durante el m√≥dulo uno.
üçÄ ¬°Suerte! üçÄ


1Ô∏è‚É£ ***** EJERCICIO 1 QUEUE ***** - guardarTragos() 1Ô∏è‚É£

Ha llegado un nuevo pedido de tragos. Es necesario recogerlos a todos y guardarlos dentro de la barra.
Adem√°s, se desea llevar un registro de la cantidad de cada trago que se ha vendido.Para esto tendr√°s que 
implementar la funci√≥n guardarTragos, la cu√°l recibir√° por par√°metros una Queue con muchos üç∏ Tragos üç∏
que se tendr√°n que guardar en un objeto que nos servir√° como contenedor.

üìù EJEMPLO üìù
(INPUT) ‚û°
["margarita", "daiquiri", "mojito", "pi√±a colada", "negroni", "daiquiri"]

(OUTPUT) ‚û°
{
  margarita: {trago: "margarita", cantidad: 1},
  daiquiri: {trago: "daiquiri", cantidad: 2},
  mojito: {trago: "mojito", cantidad: 1},
  pi√±a colada: {trago: "pi√±a colada", cantidad: 1},
  negroni: {trago: "negroni", cantidad: 1}
}

REQUISITOS:
  üü¢ Respetar el principio de FIFO que corresponde a las Queues a la hora de guardar los tragos.
  üü¢ Retornar un objeto, que tendr√° como key value los elementos que agregas y quitas de la Queue.
  üü¢ Cada trago debe tener:
    - una propiedad "trago" que almacene el nombre del trago.
    - una propiedad "cantidad" que almacene la cantidad vendida del mismo.
  üü¢ ¬°SI O SI necesit√°s utilizar una Queue!

  üëÄ TIP: Chequear el archivo DS.js para ver la funci√≥n constructora Queue, y ver sus m√©todos disponibles.
*/
/*
      margarita: { trago: "margarita", cantidad: 1 },
      daiquiri: { trago: "daiquiri", cantidad: 1 },
      mojito: { trago: "mojito", cantidad: 1 },
      "pi√±a colada": { trago: "pi√±a colada", cantidad: 1 },
      "negroni": { trago: "negroni", cantidad: 1 },
*/
  //   let node = new Node(valor); //{data:valor , next:null}
  //   let current = this.head; // parate en el primer elemento
  //   console.log("%cAgregando el nodo:", "color: cyan", node);
  //   if (!current) {
  //     // si la listya esta vacia
  //     this.head = node;
  //   } else {
  //     while (current.next) {
  //       // mientras que no encuente el ultimo valor
  //       current = current.next; // avanzo un paso
  //     }
  //     current.next = node;
  //     console.log("%cAhora yo soy el ultimo Nodo", "color:magenta", node);
  //   }
  //   this._length++;
  //   return node;
  // };
 class Node {
  constructor(data){
    this.data = data
    this.next = null
  }
 }
 function Queue(){
  this.queue = []
  this.head = null
 }

 Queue.prototype.add = function(value){
  let node = new Node(value)
  let current = this.head
  if(!current){
    this.head = node 
  }else{
    while(current.next){
      current.current.next
    }
    current.next = node
  }
  return node
 }

 Queue.prototype.remove = function(){
  return this.queue.shift()
 }

 Queue.prototype.size = function(){
  return this.queue.length()
 }

function guardarTragos() {
  // Tu c√≥digo aqu√≠:
 let obj = {} 
 let newQueue = new Queue()
}

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = guardarTragos;
